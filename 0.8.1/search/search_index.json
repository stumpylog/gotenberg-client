{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Gotenberg Python Client","text":"<p>This is a Python client for interfacing with Gotenberg, which in turn is a wrapper around powerful tools for PDF generation and creation in various ways, using a stateless API. It's a very powerful tool to generate and manipulate PDFs.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>HTTP/2 enabled by default</li> <li>Abstract away the handling of multi-part/form-data and deal with <code>Path</code>s instead</li> <li>Based on the modern httpx library</li> <li>Full support for type hinting and concrete return types as much as possible</li> <li>Nearly full test coverage run against an actual Gotenberg server for multiple Python and PyPy versions</li> </ul>"},{"location":"#examples","title":"Examples","text":"<p>Converting a single HTML file into a PDF:</p> <pre><code>from gotenberg_client import GotenbergClient\n\nwith GotenbergClient(\"http://localhost:3000\") as client:\n    with client.chromium.html_to_pdf() as route:\n      response = route.index(\"my-index.html\").run()\n      response.to_file(Path(\"my-index.pdf\"))\n</code></pre> <p>Converting an HTML file with additional resources into a PDF:</p> <pre><code>from gotenberg_client import GotenbergClient\n\nwith GotenbergClient(\"http://localhost:3000\") as client:\n    with client.chromium.html_to_pdf() as route:\n      response = route.index(\"my-index.html\").resource(\"image.png\").resource(\"style.css\").run()\n      response.to_file(Path(\"my-index.pdf\"))\n</code></pre> <p>Converting an HTML file with additional resources into a PDF/A1a format:</p> <pre><code>from gotenberg_client import GotenbergClient\nfrom gotenberg_client.options import PdfAFormat\n\nwith GotenbergClient(\"http://localhost:3000\") as client:\n    with client.chromium.html_to_pdf() as route:\n      response = route.index(\"my-index.html\").resources([\"image.png\", \"style.css\"]).pdf_format(PdfAFormat.A2b).run()\n      response.to_file(Path(\"my-index.pdf\"))\n</code></pre> <p>Converting a URL into PDF, in landscape format</p> <pre><code>from gotenberg_client import GotenbergClient\nfrom gotenberg_client.options import PageOrientation\n\nwith GotenbergClient(\"http://localhost:3000\") as client:\n    with client.chromium.html_to_pdf() as route:\n      response = route.url(\"https://hello.world\").orient(PageOrientation.Landscape).run()\n      response.to_file(Path(\"my-world.pdf\"))\n</code></pre> <p>To ensure the proper clean up of all used resources, both the client and the route(s) should be used as context manager. If for some reason you cannot, you should <code>.close</code> the client and any routes:</p> <pre><code>from gotenberg_client import GotenbergClient\n\ntry:\n  client = GotenbergClient(\"http://localhost:3000\")\n  try:\n    route = client.merge([\"myfile.pdf\", \"otherfile.pdf\"]).run()\n  finally:\n    route.close()\nfinally:\n  client.close()\n</code></pre>"},{"location":"#api-responses","title":"API Responses","text":"<p>The response from any <code>.run()</code> or <code>.run_with_retry()</code> will be either a <code>SingleFileResponse</code> or <code>ZipFileResponse</code>. There provide a slimmed down set of fields from an <code>httpx.Response</code>, including the headers, the status code and the response content. They also provide two convenience methods:</p> <ul> <li><code>to_file</code> - Accepts a path and writes the content of the response to it</li> <li><code>extract_to</code> - Only on a <code>ZipFileResponse</code>, extracts the zip into the given directory (which must exist)</li> </ul> <p>Determining which response is a little complicated, as Gotenberg can produce a single PDF from multiple files or a zip file containing multiple PDFs, depending on how the route is configured and how many files were provided.</p> <p>For example, the LibreOffice convert route may:</p> <ul> <li>Produce a single PDF when a single office document is provided</li> <li>Produce a zipped response when multiple office documents are provided</li> <li>Produce a single PDF when multiple office documents are provided AND the route is asked to merge the result</li> </ul>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#081-2024-12-17","title":"[0.8.1] - 2024-12-17","text":""},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Relaxed version restriction on <code>httpx</code></li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Test in CI using Gotenberg 8.14.1</li> </ul>"},{"location":"changelog/#080-2024-12-11","title":"[0.8.0] - 2024-12-11","text":""},{"location":"changelog/#breaking-change","title":"Breaking Change","text":"<ul> <li>Dropped support for Python 3.8 (#43)</li> </ul>"},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Official support and testing for Python 3.13 (#25)</li> <li>Support for setting PDF metadata (#42)</li> <li>Initial work by @spechtx in (#40)</li> <li>Integrated Codecov test analytics (#44)</li> </ul>"},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>Use <code>pytest-docker</code> to manage Docker image services (#36)</li> <li>Bump Bump pypa/gh-action-pypi-publish from 1.10.2 to 1.12.2 by @dependabot (#41)</li> <li>Bump codecov/codecov-action from 4 to 5 by @dependabot (#41)</li> </ul>"},{"location":"changelog/#070-2024-10-08","title":"[0.7.0] - 2024-10-08","text":""},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li><code>mike</code> deployment mis-ordered the version and alias, this has been corrected</li> <li><code>mypy</code> wasn't running correctly in CI</li> <li>Wrong paper size preset for A4 by @mannerydhe (#24)</li> </ul>"},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>All routes now return a stronger typed response than just an <code>httpx.Response</code> (#23)</li> <li>All public methods now include docstrings (#33)</li> <li>The Chromium based HTML and Markdown to PDF routes can now accept accept a <code>str</code>, containing either HTML text, Markdown or other text based resources for conversion (#30)</li> <li>See <code>string_index</code>, <code>string_resource</code> and <code>string_resources</code> for those routes</li> </ul>"},{"location":"changelog/#changed_2","title":"Changed","text":"<ul> <li>Bump pypa/gh-action-pypi-publish from 1.8.14 to 1.9.0 by @dependabot (#25)</li> <li>Bump pypa/gh-action-pypi-publish from 1.9.0 to 1.10.2 by @dependabot (#31)</li> <li>CI testing now runs against Gotenberg 8.11 (#32)</li> <li>Development tool updates in <code>pyproject.toml</code> and pre-commit hook updates</li> <li>Properly use <code>pytest</code> fixtures in all testing (#34)</li> <li>Upgrade <code>pre-commit</code> to 4.0.1 (#35)</li> </ul>"},{"location":"changelog/#060-2024-06-13","title":"[0.6.0] - 2024-06-13","text":""},{"location":"changelog/#breaking-change_1","title":"Breaking Change","text":"<ul> <li>Only Gotenberg 8 is now supported</li> </ul>"},{"location":"changelog/#fixed_2","title":"Fixed","text":"<ul> <li>The documentation site's changelog was not updating with the changes</li> </ul>"},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li><code>codespell</code> pre-commit hook</li> <li>Link to the full documentation from the README</li> <li>Documentation of all implemented routes (#16)</li> <li>Page margins may now specify the units of the margin (#21)</li> </ul>"},{"location":"changelog/#changed_3","title":"Changed","text":"<ul> <li>Bump codecov/codecov-action from 3 to 4 by @dependabot (#11)</li> <li>Bump release-flow/keep-a-changelog-action from 2 to 3 by @dependabot (#12)</li> <li>Bump pypa/gh-action-pypi-publish from 1.8.11 to 1.8.12 by @dependabot (#13)</li> <li>Bump pre-commit/action from 3.0.0 to 3.0.1 by @dependabot (#14)</li> <li>Bump pypa/gh-action-pypi-publish from 1.8.12 to 1.8.14 by @dependabot (#15)</li> <li>Use hatch commands for testing and linting (#17)</li> <li>Update testing Docker image to Gotenberg 8.5.0 (#18)</li> <li>chore: Formats JSON files with prettier (#19)</li> <li>chore: Updates Gotenberg test image to 8.5.1 (#20)</li> <li>chore: Updates mike to ~2.1.1 (#22)</li> </ul>"},{"location":"changelog/#050-2024-01-11","title":"[0.5.0] - 2024-01-11","text":""},{"location":"changelog/#added_3","title":"Added","text":"<ul> <li>Documentation site built with Github Pages and Material for MkDocs</li> <li>New method <code>.run_with_retry</code> for routes, which allows the route to be rerun as configured, with progressive backoff if the server returns a server error</li> <li>Support for Gotenberg Webhooks</li> </ul>"},{"location":"changelog/#deprecated","title":"Deprecated","text":"<ul> <li>Support for Gotenberg 7.x. This will likely be the last release to support 7.x, as the options for PDF/A have been changed</li> </ul>"},{"location":"changelog/#041-2023-12-11","title":"[0.4.1] - 2023-12-11","text":""},{"location":"changelog/#fixed_3","title":"Fixed","text":"<ul> <li>Implemented an internal workaround for older Gotenberg versions and their handling of non-latin filenames.</li> <li>When detected, the files will be copied into a temporary directory and the filename cleaned</li> <li>Gotenberg 8.0.0 will start implementing something similar once released</li> <li>The pulled Gotenberg image is now inspected, allowing local re-creation of failures against specific digests</li> <li>The <code>:edge</code> tag testing is now allowed to fail</li> </ul>"},{"location":"changelog/#040-2023-12-04","title":"[0.4.0] - 2023-12-04","text":""},{"location":"changelog/#changed_4","title":"Changed","text":"<ul> <li>Removed some certain special cases from coverage</li> <li>Updated <code>pre-commit</code> hook versions</li> <li>Updated how pytest is configured, so it will apply to any invocation</li> <li>Updated test running image to log at warning or lower using text format</li> <li>Updated test running image from 7.9.2 to 7.10.1</li> <li>For the moment, send both <code>pdfa</code> and <code>pdfFormat</code> for compatibility with 7.9 and 7.10</li> <li>See here for some subtle differences in what these options mean</li> </ul>"},{"location":"changelog/#added_4","title":"Added","text":"<ul> <li>Added new test job against Gotenberg's <code>:edge</code> tag</li> </ul>"},{"location":"changelog/#030-2023-10-17","title":"[0.3.0] - 2023-10-17","text":""},{"location":"changelog/#added_5","title":"Added","text":"<ul> <li>Support for the output filename and request tracing for all routes</li> </ul>"},{"location":"changelog/#removed","title":"Removed","text":"<ul> <li>References to compression and Brotli. Gotenberg doesn't seem to ever compress response data</li> </ul>"},{"location":"changelog/#fixed_4","title":"Fixed","text":"<ul> <li>An issue with the sorting of merging PDFs. Expanded testing to cover the merged ordering</li> </ul>"},{"location":"changelog/#changed_5","title":"Changed","text":"<ul> <li>Multiple merge calls on the same route will maintain the ordering of all files, rather than just per merge call</li> </ul>"},{"location":"changelog/#020-2023-10-16","title":"[0.2.0] - 2023-10-16","text":""},{"location":"changelog/#added_6","title":"Added","text":"<ul> <li>CodeQL scanning via GitHub</li> <li>Codecov.io coverage shield</li> </ul>"},{"location":"changelog/#changed_6","title":"Changed","text":"<ul> <li>Updated pypa/gh-action-pypi-publish from 1.8.8 to 1.8.10</li> <li>Updated actions/checkout from 3 to 4</li> <li>Mis-spelled <code>gotenerg_url</code> for a <code>Client</code> is now <code>host</code> and no longer keyword only</li> </ul>"},{"location":"changelog/#010-2023-10-15","title":"[0.1.0] - 2023-10-15","text":""},{"location":"changelog/#added_7","title":"Added","text":"<ul> <li>Chromium conversion routes</li> <li>LibreOffice conversion routes</li> <li>PDF/A conversion route</li> <li>PDF merge route</li> <li>Health status route</li> <li>Testing and typing all setup and passing</li> </ul>"},{"location":"roadmap/","title":"Roadmap","text":"<p>While I'm sure there's something out there, nothing is currently on the roadmap.</p>"},{"location":"routes/","title":"Implemented Routes","text":""},{"location":"routes/#chromium","title":"Chromium","text":"<p>Access to the Chromium module of Gotenberg, as documented here.</p>"},{"location":"routes/#url-into-pdf","title":"URL into PDF","text":"Gotenberg Link Route Access Required Properties Optional Properties Documentation <code>chromium.url_to_pdf</code> <ul><li><code>.url(\"http://localhost:8888\")</code></li></ul> See common Chromium options"},{"location":"routes/#html-file-into-pdf","title":"HTML file into PDF","text":"Gotenberg Link Route Access Required Properties Optional Properties Documentation <code>chromium.html_to_pdf</code> <ul><li><code>.index(\"index.html\")</code></li></ul> <ul><li>Add extra files by chaining <code>.resource(\"file-here\")</code></li><li> See common Chromium options</li></ul>"},{"location":"routes/#markdown-files-into-pdf","title":"Markdown file(s) into PDF","text":"Gotenberg Link Route Access Required Properties Optional Properties Documentation <code>chromium.markdown_to_pdf</code> <ul><li><code>.index(\"index.html\")</code></li><li><code>.markdown_file</code> or <code>markdown_files</code></li></ul> <ul><li>Add extra files by chaining <code>.resource(\"file-here\")</code></li><li> See common Chromium options</li></ul>"},{"location":"routes/#screenshots","title":"Screenshots","text":""},{"location":"routes/#chromium-common-options","title":"Chromium Common Options","text":""},{"location":"routes/#page-properties","title":"Page Properties","text":"Gotenberg Option Route Configuration Python Type Notes <code>singlePage</code> <code>.single_page()</code> <code>bool</code> Set via keyword only <ul><li><code>paperWidth</code></li><li><code>paperHeight</code></li></ul> <code>.size()</code> <code>PageSize</code> Current only allows size configuration in inches <ul><li><code>marginTop</code></li><li><code>marginBottom</code></li><li><code>marginLeft</code></li><li><code>marginRight</code></li></ul> <code>.margin()</code> <code>PageMarginsType</code> <code>preferCssPageSize</code> <ul><li><code>prefer_css_page_size()</code><li><code>prefer_set_page_size()</code></li> N/A <code>printBackground</code> <ul><li><code>background_graphics()</code><li><code>no_background_graphics()</code></li> N/A <code>omitBackground</code> <ul><li><code>hide_background()</code><li><code>show_background()</code></li> N/A <code>landscape</code> <code>.orient()</code> <code>PageOrientation</code> <code>scale</code> <code>scale()</code> <code>int | float</code> <code>nativePageRanges</code> <code>page_ranges()</code> <code>str</code>"},{"location":"routes/#header-footer","title":"Header &amp; Footer","text":"Gotenberg Option Route Configuration Python Type Notes <code>header.html</code> <code>.header()</code> <code>Path</code> <code>footer.html</code> <code>.footer()</code> <code>Path</code>"},{"location":"routes/#render-control","title":"Render Control","text":"Gotenberg Option Route Configuration Python Type Notes <code>waitDelay</code> <code>.render_wait()</code> <code>int | float</code> <code>waitForExpression</code> <code>.render_expr()</code> <code>str</code>"},{"location":"routes/#emulated-media-type","title":"Emulated Media Type","text":"Gotenberg Option Route Configuration Python Type Notes <code>emulatedMediaType</code> <code>.media_type()</code> <code>EmulatedMediaType</code>"},{"location":"routes/#cookies","title":"Cookies","text":"<p>These options are not yet implemented</p>"},{"location":"routes/#custom-http-headers","title":"Custom HTTP Headers","text":"Gotenberg Option Route Configuration Python Type Notes <code>extraHttpHeaders</code> <code>.headers()</code> <code>dict[str, str]</code> The dictionary of values will be JSON encoded for you"},{"location":"routes/#http-status-codes","title":"HTTP Status Codes","text":"Gotenberg Option Route Configuration Python Type Notes <code>failOnHttpStatusCodes</code> <code>.fail_on_status_codes()</code> <code>Iterable[int]</code>"},{"location":"routes/#console-exceptions","title":"Console Exceptions","text":"Gotenberg Option Route Configuration Python Type Notes <code>failOnConsoleExceptions</code> <ul><li><code>fail_on_exceptions()</code><li><code>dont_fail_on_exceptions()</code></li> N/A"},{"location":"routes/#performance-mode","title":"Performance Mode","text":"Gotenberg Option Route Configuration Python Type Notes <code>skipNetworkIdleEvent</code> <ul><li><code>skip_network_idle()</code><li><code>use_network_idle()</code></li> N/A"},{"location":"routes/#pdfa-pdfua","title":"PDF/A &amp; PDF/UA","text":"Gotenberg Option Route Configuration Python Type Notes <code>pdfa</code> <code>.pdf_format()</code> <code>PdfAFormat</code> <code>pdfua</code> <ul><li><code>enable_universal_access()</code><li><code>disable_universal_access()</code></li> N/A"},{"location":"routes/#pdf-metadata-support","title":"PDF Metadata Support","text":"<p>Gotenberg Documentation</p> <p>Add metadata to your PDFs:</p> <pre><code>from gotenberg_client import GotenbergClient\nfrom datetime import datetime\n\nwith GotenbergClient(\"http://localhost:3000\") as client:\n    with client.chromium.html_to_pdf() as route:\n        response = (route\n            .index(\"my-index.html\")\n            .metadata(\n                title=\"My Document\",\n                author=\"John Doe\",\n                creation_date=datetime.now(),\n                keywords=[\"sample\", \"document\"],\n                subject=\"Sample PDF Generation\",\n                trapped=\"Unknown\"\n            )\n            .run())\n</code></pre> <p>Supported metadata fields:</p> <ul> <li><code>title</code>: Document title</li> <li><code>author</code>: Document author</li> <li><code>subject</code>: Document subject</li> <li><code>keywords</code>: List of keywords</li> <li><code>creator</code>: Creating application</li> <li><code>creation_date</code>: Creation datetime</li> <li><code>modification_date</code>: Last modification datetime</li> <li><code>producer</code>: PDF producer</li> <li><code>trapped</code>: Trapping status ('True', 'False', 'Unknown')</li> <li><code>copyright</code>: Copyright information</li> <li><code>marked</code>: PDF marked status</li> <li><code>pdf_version</code>: PDF version number</li> </ul>"},{"location":"routes/#libreoffice","title":"LibreOffice","text":""},{"location":"routes/#office-documents-to-pdf","title":"Office Documents to PDF","text":"Gotenberg Link Route Access Required Properties Optional Properties Documentation <code>libre_office.to_pdf</code> <ul><li><code>.convert(\"mydoc.docx\")</code></li><li>or</li><li><code>.convert_files([\"mydoc.docx\"])</code></li></ul> See common LibreOffice options <p>Additional Notes:</p> <ul> <li><code>convert</code> may be called multiple times</li> <li><code>convert_files</code> is a convenience method to convert a list of file into PDF</li> </ul>"},{"location":"routes/#libreoffice-properties","title":"LibreOffice Properties","text":""},{"location":"routes/#page-properties_1","title":"Page Properties","text":"Gotenberg Option Route Configuration Python Type Notes <code>landscape</code> <code>.orient()</code> <code>PageOrientation</code> <code>nativePageRanges</code> <code>page_ranges()</code> <code>str</code> <code>exportFormFields</code> N/A N/A This option is not implemented yet <code>singlePageSheets</code> N/A N/A This option is not implemented yet"},{"location":"routes/#merge","title":"Merge","text":"Gotenberg Option Route Configuration Python Type Notes <code>merge</code> <ul><li><code>merge()</code><li><code>no_merge()</code></li> N/A <p>Additional Notes:</p> <ul> <li>If multiple files are provided, and the merge is left as default or <code>no_merge()</code> is called, the resulting file will be a zip</li> </ul>"},{"location":"routes/#pdfa-pdfua_1","title":"PDF/A &amp; PDF/UA","text":"Gotenberg Option Route Configuration Python Type Notes <code>pdfa</code> <code>.pdf_format()</code> <code>PdfAFormat</code> <code>pdfua</code> <ul><li><code>enable_universal_access()</code><li><code>disable_universal_access()</code></li> N/A"},{"location":"routes/#metadata","title":"Metadata","text":"<p>Gotenberg Documentation</p> <p>These options are not yet implemented</p>"},{"location":"routes/#convert","title":"Convert","text":"Gotenberg Link Route Access Required Properties Optional Properties Documentation <code>pdf_a.to_pdfa</code> <ul><li><code>.convert(\"mydoc.pdf\")</code></li><li>or</li><li><code>.convert_files([\"mydoc.pdf\"])</code></li></ul> <code>pdfa</code> <code>.pdf_format()</code> <code>PdfAFormat</code> <code>pdfua</code> <ul><li><code>enable_universal_access()</code><li><code>disable_universal_access()</code></li> N/A <p>Additional Notes:</p> <ul> <li>At least one of <code>pdf_format()</code>, <code>enable_universal_access()</code> or <code>disable_universal_access()</code> must be set</li> </ul>"},{"location":"routes/#merge_1","title":"Merge","text":"Gotenberg Link Route Access Required Properties Optional Properties Documentation <code>merge.merge</code> <ul><li><code>.merge([\"file1.pdf\", \"file2.pdf\"])</code></li></ul> <code>pdfa</code> <code>.pdf_format()</code> <code>PdfAFormat</code> <code>pdfua</code> <ul><li><code>enable_universal_access()</code><li><code>disable_universal_access()</code></li> N/A <code>metadata</code> N/A N/A This option is not implemented yet <p>Additional Notes:</p> <ul> <li>The library will add prefixes to the file to ensure they are merged in the order provided to <code>merge()</code></li> </ul>"},{"location":"routes/#health-check","title":"Health Check","text":""},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#installation","title":"Installation","text":"<pre><code>pip install gotenberg-client\n</code></pre>"},{"location":"usage/#how","title":"How","text":"<p>All the routes and options from the Gotenberg routes are implemented, with the exception of the Prometheus metrics endpoint. All the routes use the same format and general idea.</p> <ol> <li>First, you add the file or files you want to process</li> <li>Then, configure the endpoint with its various options the route supports</li> <li> <p>Finally, run the route and receive your resulting file</p> </li> <li> <p>Files will be PDF or ZIP, depending on what endpoint and its configuration. Endpoints which handle   multiple files, but don't merge them, return a ZIP archive of the resulting PDFs</p> </li> </ol>"},{"location":"usage/#client","title":"Client","text":"<p>First, you obtain a <code>GotenbergClient</code>. As seen below, the host where Gotenberg can be found is required, with optional configuration of global timeouts, the log level (for this library and httpx/httpcore) as well as control over the usage of HTTP/2.</p> <pre><code>class GotenbergClient:\n\n    def __init__(\n        self,\n        host: str,\n        *,\n        timeout: float = 30.0,\n        log_level: int = logging.ERROR,\n        http2: bool = True,\n    ):\n        ....\n</code></pre> <p>The client should live as long as you will be communicating with Gotenberg as this allows the connection to remain open, saving some time to re-negotiate a connection.</p> <p>To ensure proper cleanup of connection, it is suggested to use the client as a context manager. If not using as a context manager, the user should call <code>.close()</code>, preferably inside a <code>finally</code> block.</p>"},{"location":"usage/#routes","title":"Routes","text":"<p>The library supports almost all the routes defined by the Gotenberg API. Only the Prometheus metrics endpoint is not implemented.</p> <p>To utilize a route, you first select the module which provides it, then the actual operation to carry out. For example, using Chromium to convert HTML into a PDF would look like this:</p> <pre><code>with GotenbergClient(\"http://localhost:3000\") as client:\n    with client.chromium.html_to_pdf() as route:\n        ....\n</code></pre> <p>The exact options of each route vary, according to the Gotenberg documentation. Many routes share some common options, such as controlling page size or setting the PDF/A format output.</p> <p>Configuration of a route will always return the the route, allowing chaining of configuration, as seen here:</p> <pre><code>from gotenberg_client import GotenbergClient\nfrom gotenberg_client.options import A4\n\nwith GotenbergClient(\"http://localhost:3000\") as client:\n    with client.chromium.markdown_to_pdf() as route:\n        response = (\n            route.index(\"main.html\")\n            .markdown_file(\"readme.md\")\n            .size(A4)\n            .resource(\"styles.css\")\n            .fail_on_exceptions()\n            .run()\n        )\n</code></pre> <p>Once all configuration is completed, call <code>.run()</code>. This actually sends the information to Gotenberg with all form data as has been configured. At the moment, it returns the full <code>httpx.Response</code>, with the content of the response being the resulting PDF or zip file, depending on the route and configurations.</p> <p>For more details, see the routes page for a detailed breakdown of the implemented routes, and the linkage to the Gotenberg route documentation.</p>"}]}